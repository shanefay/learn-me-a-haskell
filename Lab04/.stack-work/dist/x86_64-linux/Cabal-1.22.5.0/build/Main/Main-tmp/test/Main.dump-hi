
==================== FINAL INTERFACE ====================
2016-12-20 17:34:37.51456 UTC

interface main@main:Main 7103
  interface hash: ec5761deb553cf3048f5fc5c253af03b
  ABI hash: 2940af80ea15e7a91c2100861008f33f
  export-list hash: 89faea99b874bcc12778a19795d650a7
  orphan hash: 8638ad842affb1b5814449593ca591c6
  flag hash: aaa2f55c6b419ab4e57c475cae6e0745
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.test_R_insert_br_new
  Main.test_R_insert_br_old
  Main.test_R_insert_emp
  Main.test_R_insert_leaf
  Main.test_R_lkp_branch
  Main.test_R_lkp_emp
  Main.test_R_lkp_leaf_fail
  Main.test_R_lkp_leaf_ok
  Main.test_R_map_branch
  Main.test_R_map_emp
  Main.test_R_map_leaf
  Main.test_R_show_br_emp_a1
  Main.test_R_show_br_left_a1_b2
  Main.test_R_show_br_right_a1_b2
  Main.test_R_show_empty
  Main.test_R_show_emptyX4
  Main.test_R_show_leaf_1a
  Main.test_R_show_leaf_a1
  Main.test_add_revise
  Main.test_done_exit
  Main.test_done_stay
  Main.test_empty_add
  Main.test_exit_result
  Main.test_fix_bad_branch
  Main.test_fix_bad_empty
  Main.test_fix_good_branch
  Main.test_fix_good_empty
  Main.test_help
  Main.test_list
  Main.test_prompt
  Main.test_remove_branch
  Main.test_remove_leaf
  Main.tests
module dependencies: BinTree Lab04 REPL
package dependencies: HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b
                      QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      ansi-wl-pprint-0.6.7.3@ansiw_KTAhiPa3RNI09mbeoAwSSX
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hostname-1.0@hostn_3HfIQy11Ojb2in3623bzR3 integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      test-framework-quickcheck2-0.3.0.3@testf_1ho9w8SmwvV7ao9mE3ZaRC
                      test-framework-0.8.1.1@testf_B1MVPJUrcmB7HNAGf4Uv93
                      test-framework-hunit-0.3.0.2@testf_EptgaRzrQ5a5FsSX1777nM
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      xml-1.3.14@xml_AyrkYt7P0aQDgNiMBs2bvw
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit 66bcf89478e54cab0bc320939852d08e
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit.Base 05e3acf3b4a0039179fededbe30715ce
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Char 612e350e38947989d78fc181dfd596f1
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.IO.Handle 631f32e0ad65df940f6a2b3e721d8452
import  -/  base-4.8.2.0:GHC.IO.Handle.FD 4b888b3713ea36bd21caa2badeaf319d
import  -/  base-4.8.2.0:GHC.IO.IOMode 89fcaeb96929360e7be5a7bbb14ceec9
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:System.IO.Unsafe fc45e72b9d9eb2c797a8c81f5821fcd0
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BinTree 03e75a5640ff3e092d41e970eca6a216
  exports: 71448bd79c2ab5bcc92c157d1120de03
  BinTree 81aefdecbef457d83b602830ff5d95a6
  Branch 770df489c61d06c588dcf92a12ae9eb8
  Empty cda84d3d71af71ac5a3a48fcf6a72805
  Leaf 44887b80f944cca79476647b0ff99648
  alphaChr 5b043f92b796733c408871f6389f82d7
  alphaOrd b4723a52eae01ac8eabcddada5e5a5df
  br_emp_a1 1534cd93e7527ffa4253268f816e201f
  br_left_a1_b2 5a581cffdf04d155354cf09e998662fa
  br_right_a1_b2 9510e1d4f2203806e120fd77cb94b487
  empCI 98357bbe9d56309630696b0046410962
  empIC 99a11b14022de19bde2399d55dedf3a4
  emptyX4 2a2f995187ba44169d2b062002e495b3
  ins1 bed1b510fbf35ff1361c2317ee2654d0
  ins2 ea861d9c478a9e6da31c928e3fd8e1c4
  ins3 0b081f769df2464c8b3c05ad0fd5be95
  ins4 6db5e6415cff7ffc2aa571f912af5265
  leaf_1a 585376599aafe59b1a7eff78668e1dbc
  leaf_2b bd6c017d481eb15f9b66bd17c5a35c18
  leaf_a1 0cb1003862a205833e380f42621bc553
  leaf_b2 1c55d2e196831b64c5b1842df25eb1a7
  treeLookup 30a390682c1902385bfa69304d3f161b
  treeMap f267cd3603a2f8b0aa69a2a718d2dc6c
import  -/  Lab04 e0df22eba4209dd970f03ea39cf83bdb
  exports: 4f93b3aa36d155f82155f65065214c4c
  State b97940defff2f9713f5e9a0468c8164a
  done04 8d5bd6616f40888ac0dd167abbcd17d3
  execute04 4236d57be6945a902af45a4db60dbc7e
  exit04 979fb288c313b230474758e40ae773dc
  mkprompt b3996a59abb20056226f57f484f0429f
import  -/  REPL 522713d1306eda27264d8d9a1f4651fb
  exports: d909f20870ecd914effb556280d3fcfc
import  -/  test-framework-quickcheck2-0.3.0.3@testf_1ho9w8SmwvV7ao9mE3ZaRC:Test.Framework.Providers.QuickCheck2 f581717353d83c62095d8ecb8a5d4d4b
import  -/  test-framework-0.8.1.1@testf_B1MVPJUrcmB7HNAGf4Uv93:Test.Framework f67b2d8241bfa35267aad2e4a4b76ee9
import  -/  test-framework-0.8.1.1@testf_B1MVPJUrcmB7HNAGf4Uv93:Test.Framework.Core f433b65c2544657a20d68fe310c8026a
import  -/  test-framework-0.8.1.1@testf_B1MVPJUrcmB7HNAGf4Uv93:Test.Framework.Runners.Console a28542c59ee3219b6b399e1f9a2c960c
import  -/  test-framework-hunit-0.3.0.2@testf_EptgaRzrQ5a5FsSX1777nM:Test.Framework.Providers.HUnit 5a7012f0903213dc7b92550390342c68
081ffa3c1996b5fed34f48bf63fb3a1e
  $s$fEq(,) ::
    GHC.Classes.Eq
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                     GHC.Types.Float)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fEq(,)1
                     GHC.Classes.$fEqFloat)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fEq(,)1
                     GHC.Classes.$fEqFloat) -}
239bdb0fea42031ac8692aa35fe2fea8
  $s$fEq(,)1 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Base.String GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fEq(,)_$s$fEqBinTree -}
b4e3653e1c30db32c0cb4a53dae210c9
  $s$fEq(,)2 ::
    BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
                   b :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float ->
                 case BinTree.$fEqBinTree_$c==
                        @ [GHC.Types.Char]
                        @ GHC.Types.Float
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEqFloat
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4d298c0a4035041323e4b45802aa2364
  $s$fEq(,)3 ::
    GHC.Classes.Eq
      ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float),
       GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float),
                     GHC.Types.Bool)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fEq(,)4
                     GHC.Classes.$fEqBool)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fEq(,)4
                     GHC.Classes.$fEqBool) -}
29d4e4850b84bd1a0236ad171b1f9bac
  $s$fEq(,)4 ::
    GHC.Classes.Eq
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEq(,) -}
3a4d6f24fb2d19fe80e4c827402f1037
  $s$fEq(,)_$s$fEqBinTree ::
    GHC.Classes.Eq (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
                  (BinTree.$fEqBinTree_$c==
                     @ [GHC.Types.Char]
                     @ GHC.Types.Float
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEqFloat)
                  Main.$s$fEq(,)2 -}
bdf25bb6bd55ff470acb8822df6efad3
  $s$fEqBinTree ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Int
                     @ [GHC.Types.Int]
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEq[]_$s$fEq[])
                  Main.$s$fEqBinTree1 -}
af577b2466f1f24a71cdabd57fcd3dfc
  $s$fEqBinTree1 ::
    BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
    -> BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
                   b :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int] ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Int
                        @ [GHC.Types.Int]
                        GHC.Classes.$fEqInt
                        GHC.Classes.$fEq[]_$s$fEq[]
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
52e2e803de7b6ba7d2cd1ff686771c6e
  $s$fEqBinTree2 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqChar)
                  Main.$s$fEqBinTree3 -}
9cecd83312ffb2dda1ff95b8483b6790
  $s$fEqBinTree3 ::
    BinTree.BinTree GHC.Types.Int GHC.Types.Char
    -> BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
                   b :: BinTree.BinTree GHC.Types.Int GHC.Types.Char ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Int
                        @ GHC.Types.Char
                        GHC.Classes.$fEqInt
                        GHC.Classes.$fEqChar
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e76292407ea537f116b27072d0cc6c8b
  $s$fEqBinTree4 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Classes.$fEqChar
                     GHC.Classes.$fEqInt)
                  Main.$s$fEqBinTree5 -}
96d96f5d746326e4a2b86d3f08412d76
  $s$fEqBinTree5 ::
    BinTree.BinTree GHC.Types.Char GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
                   b :: BinTree.BinTree GHC.Types.Char GHC.Types.Int ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Char
                        @ GHC.Types.Int
                        GHC.Classes.$fEqChar
                        GHC.Classes.$fEqInt
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f89e2dc2d4678185ab1378a155291c8b
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  Main.$s$fEqMaybe1
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Int GHC.Classes.$fEqInt) -}
f424f16db69205d8f2e5f596f54823e1
  $s$fEqMaybe1 ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GHC.Types.Int
                   ds1 :: GHC.Base.Maybe GHC.Types.Int ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } }) -}
cfa36c6f6f670ef0a32b5f47b4bc6853
  $s$fShow(,) ::
    GHC.Show.Show
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                     GHC.Types.Float)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fShow(,)1
                     GHC.Float.$fShowFloat)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList -}
1bdc68cb28623703f403a730e549c507
  $s$fShow(,)1 ::
    GHC.Show.Show (BinTree.BinTree GHC.Base.String GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fShow(,)_$s$fShowBinTree -}
7c66029f5014cb8efce5caec0738ef63
  $s$fShow(,)2 ::
    BinTree.BinTree [GHC.Types.Char] GHC.Types.Float -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float ->
                 BinTree.treeShow
                   @ [GHC.Types.Char]
                   @ GHC.Types.Float
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Float.$fShowFloat
                   GHC.Types.False
                   eta) -}
c2dfee36286bedecc8e2bb711b119331
  $s$fShow(,)3 ::
    GHC.Types.Int
    -> BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ [GHC.Types.Char]
                         @ GHC.Types.Float
                         GHC.Show.$fShow[]_$s$fShow[]1
                         GHC.Float.$fShowFloat
                         GHC.Types.False
                         x))
                   s) -}
82dbb280b0d61f99ca0f52e6960c1b3b
  $s$fShow(,)4 ::
    GHC.Show.Show
      ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float),
       GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float),
                     GHC.Types.Bool)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fShow(,)5
                     GHC.Show.$fShowBool)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow1
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList1 -}
68d0e44a876804656243b4002c82505e
  $s$fShow(,)5 ::
    GHC.Show.Show
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShow(,) -}
463488a475244f5b0827c5dd483c822e
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                   @ GHC.Types.Float
                   Main.$s$fShow(,)1
                   GHC.Float.$fShowFloat
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6fe7d81c2c2ce814cc22b71c1864c50d
  $s$fShow(,)_$s$fShow(,)_$cshow1 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U(U)),U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                          GHC.Types.Float),
                         GHC.Types.Bool) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   @ GHC.Types.Bool
                   Main.$s$fShow(,)5
                   GHC.Show.$fShowBool
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
76fbe09d8190c5b5e1df947d835a4dc8
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                            GHC.Types.Float)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                      @ GHC.Types.Float
                      Main.$s$fShow(,)1
                      GHC.Float.$fShowFloat
                      GHC.Show.shows18)
                   eta
                   eta1) -}
267ecab6c20d57c471720fdb031be55e
  $s$fShow(,)_$s$fShow(,)_$cshowList1 ::
    [((BinTree.BinTree GHC.Base.String GHC.Types.Float,
       GHC.Types.Float),
      GHC.Types.Bool)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                             GHC.Types.Float),
                            GHC.Types.Bool)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float)
                      @ GHC.Types.Bool
                      Main.$s$fShow(,)5
                      GHC.Show.$fShowBool
                      GHC.Show.shows18)
                   eta
                   eta1) -}
59afeea1687c3bd3860cd379cacb64e5
  $s$fShow(,)_$s$fShowBinTree ::
    GHC.Show.Show (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
                  Main.$s$fShow(,)3
                  Main.$s$fShow(,)2
                  (BinTree.$fShowBinTree_$cshowList
                     @ [GHC.Types.Char]
                     @ GHC.Types.Float
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Float.$fShowFloat) -}
0d1dfc6f9ae3b6f5aa60b1097bcb6d21
  $s$fShowBinTree ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                  Main.$s$fShowBinTree2
                  Main.$s$fShowBinTree1
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Int
                     @ [GHC.Types.Int]
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow[]_$s$fShow[]) -}
f6cecc8732f8392c64a442b67dcc946a
  $s$fShowBinTree1 ::
    BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int] ->
                 BinTree.treeShow
                   @ GHC.Types.Int
                   @ [GHC.Types.Int]
                   GHC.Show.$fShowInt
                   GHC.Show.$fShow[]_$s$fShow[]
                   GHC.Types.False
                   eta) -}
ece11027b111fa52e503425ef32dbcfc
  $s$fShowBinTree2 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Int
                         @ [GHC.Types.Int]
                         GHC.Show.$fShowInt
                         GHC.Show.$fShow[]_$s$fShow[]
                         GHC.Types.False
                         x))
                   s) -}
0d89419783409c8a26a9e70eeba649f4
  $s$fShowBinTree3 ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                  Main.$s$fShowBinTree5
                  Main.$s$fShowBinTree4
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowChar) -}
007ddb7c828aa348bcbade7b07b2e283
  $s$fShowBinTree4 ::
    BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Int GHC.Types.Char ->
                 BinTree.treeShow
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowChar
                   GHC.Types.False
                   eta) -}
6d58043f90b4429170810f549959f3a3
  $s$fShowBinTree5 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Int
                         @ GHC.Types.Char
                         GHC.Show.$fShowInt
                         GHC.Show.$fShowChar
                         GHC.Types.False
                         x))
                   s) -}
844e812213740bc9813e1c0643333874
  $s$fShowBinTree6 ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                  Main.$s$fShowBinTree8
                  Main.$s$fShowBinTree7
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Show.$fShowChar
                     GHC.Show.$fShowInt) -}
6e4500eeb13e77cdc1628045a9a19cfc
  $s$fShowBinTree7 ::
    BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Char GHC.Types.Int ->
                 BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   eta) -}
13dec293f4016827acede3f5b4d87aa8
  $s$fShowBinTree8 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Char
                         @ GHC.Types.Int
                         GHC.Show.$fShowChar
                         GHC.Show.$fShowInt
                         GHC.Types.False
                         x))
                   s) -}
2edd78cece7f0bde71bf2a97b8d48d06
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (GHC.Show.$fShowMaybe_$cshow @ GHC.Types.Int GHC.Show.$fShowInt)
                  Main.$s$fShowMaybe1 -}
34b1d8bad451a916aeb230bcf8ea34fb
  $s$fShowMaybe1 :: [GHC.Base.Maybe GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [GHC.Base.Maybe GHC.Types.Int] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.shows18)
                   eta
                   eta1) -}
adb145db0b13cc1ea1668b4678c8448f
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
71c620aaaba63d7086f2a0eb1854960a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Environment.getArgs1 eta of ds1 { (#,#) ipv ipv1 ->
                 case Test.Framework.Runners.Console.defaultMain7
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Test.Framework.Runners.Console.defaultMain4
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv5 of ww { Test.Framework.Runners.Options.RunnerOptions ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Test.Framework.Runners.Console.$wa
                   Main.tests
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ipv4 } } } }) -}
b676f5bee021562cae826bb2a5491b50
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
d35e6d47a63c06867b1be382caf0d708
  test_R_insert_br_new :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests361 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
121257fa9668c879ab89dec17b3c0be6
  test_R_insert_br_old :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests347 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9b18ae4d632e357b916548ef88a89b87
  test_R_insert_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests384 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
dbe82febcceb9d436f4b856d2b6b8c18
  test_R_insert_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests373 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6a81a48a71459de5adb4d84bdd358391
  test_R_lkp_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests292 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
998bb7a898ada23041f0f98e11f78d0e
  test_R_lkp_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests335 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5e3cd22a864a94e9ab3c442b7c5ca889
  test_R_lkp_leaf_fail :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests322 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bb7ff7a9a16fcafad1b269a851fb9a12
  test_R_lkp_leaf_ok :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests307 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4eae5f459b2f4a9b1950e6919a662b87
  test_R_map_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests393 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
dfe7a8e44c9cfb7d22a6e46651aa868c
  test_R_map_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests420 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a29068fcacd0d2aa1af62850767298f1
  test_R_map_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests409 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3be7374fa43f0bd1559fa8eb40d38079
  test_R_show_br_emp_a1 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests465 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
381058f15f699d818a4f0c96bbf007da
  test_R_show_br_left_a1_b2 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests453 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6e7719b3e8342da0fa7d351adb565417
  test_R_show_br_right_a1_b2 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests442 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6e7607011b2a2de67bed7d8245da28ae
  test_R_show_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests496 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
74d99d9ab0c2569cc4c51153b0bb32f0
  test_R_show_emptyX4 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests431 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
780d7571734fa2d24ca30eb0c8056373
  test_R_show_leaf_1a :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests475 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
69e11a79d7df91df6efda4bad6c7f3ea
  test_R_show_leaf_a1 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests486 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9dba626b0e48a09b2a85435cdd2d2189
  test_add_revise :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests176 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
cbc7ca4e68d1d973081e4cf635e8eeb3
  test_done_exit :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests240 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a347d9bb2d55c5086f4cf598688573cb
  test_done_stay :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests222 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
ac2b32773a45a11b5a96eb7407f63c3a
  test_empty_add :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests188 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a13859ae68e6c08db6f314f4ca42ba31
  test_exit_result :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests204 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
846ceabba87802b1dce90358700700eb
  test_fix_bad_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests135 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
436f5894469b6f9b4925a9384d982b99
  test_fix_bad_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests162 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0877140982f8e8fb3521460aebc9a887
  test_fix_good_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests114 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f536b904a55bde1a66236f83c0f7ae52
  test_fix_good_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests149 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
51294d286c1504afb4013c5ad07e7d4a
  test_help :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests17 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
89890c17c90f882148c575f5b6517a46
  test_list :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests49 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
edf9b27b0b4eadaa3167c53077f9a5fc
  test_prompt :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests255 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9d98a8b57be7bb78c6008410ca604944
  test_remove_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests79 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3fd0e5dff1917c0c0bb9884c438eb27c
  test_remove_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests100 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
98f567459f2e2f3920a88ea72a852419
  tests :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests272
                   Main.tests1) -}
60315a3d1113e1b728c150623b254cee
  tests1 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests252
                   Main.tests2) -}
0b3e23e9fc64b554789827b42891188c
  tests10 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests134
                   Main.tests11) -}
cd7e76ed26b009416c4b945a93ec5eb3
  tests100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests106
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests105
                   Main.tests101
                   eta2) -}
655c9e5845f87399fb96189b911c5b6e
  tests101 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests102
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
3fff50916c0ec107d74fc936764afdb8
  tests102 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests88
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests30
                        Main.tests103
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
ab23f264e56ae8d32e48ecd377304c17
  tests103 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests104, Main.tests58)) -}
29f0a622f6838170167b05cea9bb1080
  tests104 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests58) -}
9d7f72224af24fbdac43b8590fe2f0cb
  tests105 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests91, Main.tests21)) -}
c5637f384efcb70ce20c3c7469a4cad1
  tests106 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests107) -}
cf932e3d1cca32d36ee31705273cbba5
  tests107 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests108) -}
3cb29e29dcc733c84391ab64e5d77e5b
  tests108 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests109
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
f735a4d7d8d5dcb8b25a6416d111c010
  tests109 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests110)) -}
7bfe0dc04582e30b74b4206a30a1e664
  tests11 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests113
                   Main.tests12) -}
550a83b695ea36e60e6559774fa173d0
  tests110 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests111
                   Main.tests41
                   Main.tests111
                   Main.tests40) -}
407dce8a470a1386f12f2f9877acfc02
  tests111 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 131) -}
ca65b42f839ea059ece868fbcc1d55e4
  tests112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Remove Leaf {2 marks}"#) -}
5f9d07b75a92ab752b97ffe8eda7d232
  tests113 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests133
                   Main.tests114
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
ea2c9c1243cf3a64af7a70231235f41e
  tests114 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests127
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests126
                   Main.tests115
                   eta2) -}
b30ecca6939e2865f7a91c7fc4eb10b5
  tests115 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests116
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
8c1636d7d457665558e1c60b4e6ff564
  tests116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests125
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests117
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests125
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
9ddc1699dfac687b92ec46a1613f5df9
  tests117 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests119, Main.tests118)) -}
7fbfab28b2bb9eba570291615222d964
  tests118 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 42.0) -}
3b171c19703859f9c80115c5bad3ab15
  tests119 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests124
                   Main.tests123
                   Main.tests120) -}
f084acaf8d7e6a5cfa426454305b0744
  tests12 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests99
                   Main.tests13) -}
205c1001c07bd0cc0f63c23e19a62423
  tests120 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests122
                   Main.tests121) -}
62a8d2b8700c875bef450afcb38f1aeb
  tests121 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 31.0) -}
cddf1260aafe308ae90064264cacbf20
  tests122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
71c3617c1cdb994889467c1e5625b070
  tests123 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 11.0) -}
432588eff1aa4fb12f65bb2b7fe8a4bf
  tests124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "a"#) -}
5f84f9a7ce60b89c256a75d5dac092ac
  tests125 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_good_branch.log"#) -}
3bde0230684df94fb3c1d6dc2ef64ad8
  tests126 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: ((Main.tests117, GHC.Types.True)) -}
0676b1f95b0141ad79ff78e6581215b8
  tests127 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests128) -}
ac5ef3d2a202cd449781b0bcf04795b8
  tests128 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests129) -}
5f5d3789c9d9e1432a613890defba60e
  tests129 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests130
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
72053fadfabcadbf540884b8dc0757fc
  tests13 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests78
                   Main.tests14) -}
4703b9e9c2432b4fabcf1748edbbcef1
  tests130 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests131)) -}
ccb8c959a751bce8af58210398eb2352
  tests131 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests132
                   Main.tests41
                   Main.tests132
                   Main.tests40) -}
d3df1b514053afce6b9588030e26f893
  tests132 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 121) -}
c6506fab1aa7d19c67048add76c2e2d8
  tests133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Good Branch {1 mark}"#) -}
1654a6f41aff5fedd1e576593a414793
  tests134 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests147
                   Main.tests135
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
9e981cf52ba168b3b32149a4da70ff44
  tests135 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests141
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests140
                   Main.tests136
                   eta2) -}
0bcc51a9c68a60582913da5a39fd5879
  tests136 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests137
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
1a43b7f271243cd75cd9bf1e9ac48cfc
  tests137 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests139
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests138
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests139
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
4a0eb2a7124255ea97614e5a315b1805
  tests138 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests119, Main.tests58)) -}
50ea09e8efc695890793b358f068a906
  tests139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_bad_branch.log"#) -}
f7b0a3ec8b3b50c54852e9fb065105de
  tests14 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests48
                   Main.tests15) -}
cbf36c452f71b44fd496e0ba02dea21c
  tests140 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: ((Main.tests117, GHC.Types.False)) -}
06fb11deaffd3c1c0d24b711d4e075b0
  tests141 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests142) -}
5671b92e2252261199162cf98eaf14dc
  tests142 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests143) -}
efc58bdb441564da123110ce1eb2d28b
  tests143 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests144
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
50c133e827961739c3b4663cac3a81d5
  tests144 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests145)) -}
bc55f7db43211c774de1e93d1ee513c0
  tests145 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests146
                   Main.tests41
                   Main.tests146
                   Main.tests40) -}
a18e3cb26fa8d722d73fef3aa293b6d0
  tests146 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 112) -}
a8966bd7aed0ef18ec1c115342ecefac
  tests147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Bad Branch {1 mark}"#) -}
063d3d3a05f0234bc3ef654d61ecf9b2
  tests148 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests160
                   Main.tests149
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
9df8812062e7b59de47d8e70a3250560
  tests149 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (Lab04.State, GHC.Types.Bool)
                   Main.tests154
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests153
                   Main.tests150
                   eta2) -}
d1a2b1fd7f546abe15c779bbe42589cb
  tests15 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests16
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
f7f033e593a79ce4293f2dad73660082
  tests150 :: (Lab04.State, GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (Lab04.State, GHC.Types.Bool)
                   Main.tests151
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <(Lab04.State, GHC.Types.Bool)>_R))) -}
cc1b029482f4997d9f6af0446fb0eee3
  tests151 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Lab04.State, GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests152
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests20
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests152
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
c4ad97e832476a963fd5122bd4cfe62c
  tests152 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_good_empty.log"#) -}
ddf81ed6691270cb5fa8bda61edd4c16
  tests153 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.tests20, GHC.Types.True)) -}
5678cbeab6b77440fc2d4b3ea1d13e8c
  tests154 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests155) -}
f63903c3064d80c074aead48d8522c79
  tests155 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests156) -}
94344bf0dc6c236809b5c51fb4628839
  tests156 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests157
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
11cc9196e1418c6b6b34ff26b4ebe11b
  tests157 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests158)) -}
b773a633f35334f8debb86cbef0c759a
  tests158 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests159
                   Main.tests41
                   Main.tests159
                   Main.tests40) -}
8eef47e373dbcbf80fa4552433dcd2ff
  tests159 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 103) -}
00edcc55192889900763832594a75091
  tests16 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests47
                   Main.tests17
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
9f33d54de63d97ef16c7a0c6d9bf139e
  tests160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Good Empty {1 mark}"#) -}
ca9e1c5730afdbdde6d2dcbce51a5e85
  tests161 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests174
                   Main.tests162
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
b6263a5f3128064a7b0f826257245356
  tests162 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests168
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests167
                   Main.tests163
                   eta2) -}
262a0d4dc8bc8c7bb9830088f28dc38f
  tests163 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests164
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
ecb47bf8996c12dc57a3a19a047224a2
  tests164 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests166
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests165
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests166
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
8076f627aa2b11b41f2195811edcf176
  tests165 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((BinTree.Empty @ GHC.Base.String @ GHC.Types.Float,
                  Main.tests58)) -}
0873f93e0e432771ff8db3e04e60b12d
  tests166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_bad_empty.log"#) -}
bff33a10ae09e32234307451d118e5b2
  tests167 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.tests20, GHC.Types.False)) -}
04dfe17c60d89ae7a0e7157c4e69eff1
  tests168 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests169) -}
4b44f4c9ada6ba9af38729e84bc1398a
  tests169 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests170) -}
690f5610acab25b01dcae117f6c43618
  tests17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Base.String]
                   Main.tests35
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   GHC.Show.$fShow[]_$s$fShow[]2
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests24
                   Main.tests18
                   eta2) -}
ab4734a8a13104a9f91603d350a9caec
  tests170 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests171
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
05f72999396521e4ac7689778e7c52b4
  tests171 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests172)) -}
d6ff300055eeb5400f79b9040793f992
  tests172 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests173
                   Main.tests41
                   Main.tests173
                   Main.tests40) -}
79f325846240b650d6a579b03a7b8529
  tests173 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 94) -}
8d6b2805c099f005732bb695c72431df
  tests174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Bad Empty {1 mark}"#) -}
d6e71426ac7c9d41c9252f0cc5293811
  tests175 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests186
                   Main.tests176
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
15226099155d85e96c3aafa8cd352b3e
  tests176 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests180
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests103
                   Main.tests177
                   eta2) -}
a91f8000f9a67fef847fdf2fc9e50b13
  tests177 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests178
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
1fa1181f11815ef7d8ca22963226369d
  tests178 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests179
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        Main.tests20
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 (# ipv10, ipv7 #) } } } } } } }) -}
ab0cf0700011849766c70c590aea54d5
  tests179 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/add_revise.txt"#) -}
12ed4ee04bded374b943dd37cbd3c50e
  tests18 :: [GHC.Base.String]
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ [GHC.Base.String]
                   Main.tests19
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R))) -}
7f8ad53befd19fb202fc20efb728d4fa
  tests180 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests181) -}
af35d8b1c059e3a6dd81157e9e4cd5d0
  tests181 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests182) -}
3e8bda5b53ef125bfa5f92456804f232
  tests182 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests183
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
5b21d42e3300984d9f2aa882bbc2a56d
  tests183 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests184)) -}
ce8d74984491d4079e0ba3defe8b7910
  tests184 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests185
                   Main.tests41
                   Main.tests185
                   Main.tests40) -}
fdff7dfce58e001fea2d2926db3833a5
  tests185 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 85) -}
3f7efe22392c9880aa1b9c9bb5d25c49
  tests186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Revise Add {2 marks}"#) -}
276126f8a544aea75d6e11c098a496a9
  tests187 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests199
                   Main.tests188
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
7a67468e945b334c15c86a1921c54da6
  tests188 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests193
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests192
                   Main.tests189
                   eta2) -}
737add1b94e632b6513d6b1f18b196ce
  tests189 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests190
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
fb7cc68d986853b052d5e8fff8d66a8e
  tests19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests23
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests22
                        Main.tests20
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests23
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    Data.OldList.sortBy
                      @ GHC.Base.String
                      GHC.Classes.$fOrd[]_$s$ccompare1
                      (Data.OldList.words ipv9) #) } } } } } }) -}
3cdf304db56ddfc24141ae89049d3cb2
  tests190 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests191
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        Main.tests20
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
99cd85a4e75a5becdf7bd3e16ca4d8eb
  tests191 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/empty_add.txt"#) -}
3ae29c1358225fc911eabea0964443de
  tests192 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests85, Main.tests86)) -}
c1cd7b85b4b4e09a808b44c8f2348032
  tests193 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests194) -}
d6c07e0b4ac6ec82101ffcb9ef31c170
  tests194 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests195) -}
5bcd0cd8bffc73e9645d7d9cf501ba4a
  tests195 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests196
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
37ca25854183418556453983437b60f5
  tests196 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests197)) -}
fa3dfa91735eecc62b789103e0e1b794
  tests197 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests198
                   Main.tests41
                   Main.tests198
                   Main.tests40) -}
38042109e2270fb6c7871032f597abf2
  tests198 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 74) -}
7233a03ac53657c9c6b1f722728823f3
  tests199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Add to Empty {2 marks}"#) -}
877976f5317ae14724c337ca06124546
  tests2 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests218
                   Main.tests3) -}
3c14414233dd9692190d7e1159c7588b
  tests20 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((BinTree.Empty @ GHC.Base.String @ GHC.Types.Float,
                  Main.tests21)) -}
0d8ee6c910d7d75bd6cd4091dd062151
  tests200 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Commands (16 marks)"#) -}
784c28e55bc8e7672febb894d494e738
  tests201 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests217
                   Main.tests202) -}
44502f102404b3af1d6e1697eccb1ebf
  tests202 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests203
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
a1f333e81336294da6859d2d3d9d9f66
  tests203 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests216
                   Main.tests204
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
fc3e0ed7ca9b03320e2f6661c7ef0d83
  tests204 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Float
                   Main.tests208
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqFloat
                   GHC.Float.$fShowFloat
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests207
                   Main.tests205
                   eta2) -}
2d73085c027f3446a487aa41bf7137fd
  tests205 :: GHC.Types.Float
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ GHC.Types.Float
                   Main.tests206
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Float>_R))) -}
50ec70d02a51720b4f2df23300d07042
  tests206 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Float #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 (# s', Main.tests207 #) }) -}
a95071af9f6df68006b973e40a174cae
  tests207 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 123.45) -}
b221825c171a2b036594ec356137bb56
  tests208 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests209) -}
8a01794ad438fa1a4c11c7d800164acc
  tests209 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests210) -}
c6ed7a13268a7c7e9d0d7aca4bb2f2f2
  tests21 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 0.0) -}
5069fc8bcf0a9c679fc6a7adaaf88cdf
  tests210 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests211
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
7a8bbf51d53e918b6ff2d5f5d4f2a77c
  tests211 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests212)) -}
9a1ee857282d24d7aa620162a2ac0eb7
  tests212 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests215
                   Main.tests214
                   Main.tests215
                   Main.tests213) -}
bd492d2bb13663e4895cfa5756474b0c
  tests213 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 49) -}
9ba6e8236aa41ea03888ddd02ea110f4
  tests214 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 46) -}
4beddbd30cd8de50b58f961622b8785f
  tests215 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 64) -}
a78f9412b904817a04a71a44a90f1d60
  tests216 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Final Result {1 mark}"#) -}
c383b990f4833b39e04949292741fa46
  tests217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Exit Result (1 mark)"#) -}
69f9bebae461ffa5c013e22720442b55
  tests218 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests251
                   Main.tests219) -}
a3e30193ca9fc4c58a8acd5827ccde5c
  tests219 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests239
                   Main.tests220) -}
1613c7a401072653a00c205bc424b6a8
  tests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "?"#) -}
9208689640c9a3fe200ec171cd1a1a6b
  tests220 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests221
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
51fa2dcac552214a341f54eaabb3b385
  tests221 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests238
                   Main.tests222
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
aa0d75aab2f0faeb7e64730c4e71f04e
  tests222 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Bool
                   Main.tests230
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqBool
                   GHC.Show.$fShowBool
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.False
                   Main.tests223 `cast` (Data.Monoid.NTCo:Any[0])
                   eta2) -}
3f73a3c670a9f899a497cd41840b1e65
  tests223 :: Data.Monoid.Any
  {- Unfolding: (Main.tests_go Main.tests224) -}
f3bfbea7fc9d2626f5a7241933aec806
  tests224 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests225) -}
f0e547bb279b07513996671c4c049208
  tests225 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests34
                   Main.tests226) -}
56a111da2dbff6e7b803cff996de6e0b
  tests226 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests32
                   Main.tests227) -}
468826f86b3d6c53784ee37e89051776
  tests227 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests30
                   Main.tests228) -}
3731c2e835dbdf5f9d9ba612700e3280
  tests228 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests229
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
7417aeeaef75880de221a2e3a9c7c3b5
  tests229 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_zero"#) -}
3f2fefb8ffab480d8d41db1d52511b7f
  tests23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/help.log"#) -}
d2af4e7c8e83e0c6caad6db4184fc33e
  tests230 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests231) -}
d347089bfcb328074d7194dc042a5d0f
  tests231 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests232) -}
bc941700f353eae620f3316c3a8ca95e
  tests232 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests233
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
5f779afd2805bff414383de03b63d8d8
  tests233 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests234)) -}
5bc9ad0123a79db6b536bef565c582c3
  tests234 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests237
                   Main.tests236
                   Main.tests237
                   Main.tests235) -}
5282ab9f9ac15ff732d61c8374d57aea
  tests235 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 66) -}
94ec14b82e03e0127d8f4a9d42d19cf8
  tests236 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 63) -}
765e044be43cb629e1c592a4983daadf
  tests237 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61) -}
f18422ec668459ed755220dbd903f595
  tests238 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Stay {1 mark}"#) -}
2f0c722a46567dda3f4332b1ec0877ed
  tests239 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests250
                   Main.tests240
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
5fea32175eba351894d1416093f54eb1
  tests24 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests22
                   Main.tests25) -}
50a296a11feb740b04d06667980b717a
  tests240 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Bool
                   Main.tests242
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqBool
                   GHC.Show.$fShowBool
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   Main.tests241
                   eta2) -}
d2d7da4e3d761aad5e3b85aa5bfa8679
  tests241 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString Main.tests33 Lab04.done1) -}
5b26ed0604f476ba248dc3713343414c
  tests242 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests243) -}
b14feeadc53e38d57d4c1e581aed7861
  tests243 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests244) -}
169aa8bd000d831afd5f910f7fd8b5d9
  tests244 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests245
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
7e9e0d3b7febe32b1a67d3ef24c9f7be
  tests245 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests246)) -}
626cec19b1d4f66d9f00654496e5aa4d
  tests246 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests249
                   Main.tests248
                   Main.tests249
                   Main.tests247) -}
860fdc842105df60b8020fad31f1a9c3
  tests247 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 35) -}
2673a4e69f8528b581ea587b3b6afbe9
  tests248 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 32) -}
d256c392fe918abd96967f8392c8abea
  tests249 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60) -}
2d8e492a123c7cc5b4d7986da9219a56
  tests25 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests34
                   Main.tests26) -}
08434d697eb3616dcdd343e094ebddb0
  tests250 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exit {1 mark}"#) -}
d1d55a21a92051932848a0fea2469e3e
  tests251 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exiting (2 marks)"#) -}
4fc50d2f959c262116b9405fd3e022eb
  tests252 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests271
                   Main.tests253) -}
66432cd229cc24ca95298e09fc92dcea
  tests253 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests254
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
29835a8b85323a821b3c4652de74a875
  tests254 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests270
                   Main.tests255
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
6a9b1520e32811df72ed7f05f3abbccf
  tests255 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Types.Char]
                   Main.tests262
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests261
                   Main.tests256
                   eta2) -}
f2fae40bc35b70eaba8ae6709de371ac
  tests256 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ GHC.Types.Char
                   6
                   Main.tests257) -}
94bb55555cd97c46f22da09181f8e5da
  tests257 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.dropWhile
                   @ GHC.Types.Char
                   Main.tests260
                   Main.tests258) -}
5ec81df8f92090d221dffb5f6bde2598
  tests258 :: GHC.Base.String
  {- Unfolding: (Main.tests259 (GHC.Types.[] @ GHC.Types.Char)) -}
250c73c7c474a6f16bb8764c7e1c7575
  tests259 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   123.45) -}
5a885031be53cc7c80389bff32939361
  tests26 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests33
                   Main.tests27) -}
d43ad7f246957f25ac86b5819a2523ff
  tests260 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ x :: GHC.Types.Char ->
                 case x of wild { GHC.Types.C# c# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord#
                           (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48))
                           __word 9) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
e1791cefd5ff32b94c1b7332095fa02b
  tests261 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "123.45"#) -}
79aac47fe5db7ed43576769283a6472c
  tests262 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests263) -}
31a634abe65b6d15e97baa63ad09795a
  tests263 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests264) -}
8417651215d25128c225e58a8a5654bb
  tests264 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests265
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
19810e5e27ff195a76dbb4415dd661a9
  tests265 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests266)) -}
b49848dac8c0431bd7b416a849f6b013
  tests266 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests269
                   Main.tests268
                   Main.tests269
                   Main.tests267) -}
496f07bccb74b4d2c4b5726b7d3988df
  tests267 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 81) -}
c9115179aa2694744428761596acb6ce
  tests268 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 78) -}
b89ebfa0f916d6b436e253c1c22df2b8
  tests269 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58) -}
508dd7f79ae805e83df6ad6584a4b222
  tests27 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests32
                   Main.tests28) -}
2142b3db502df45c0aedf8ff89666047
  tests270 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prompt {1 mark}"#) -}
dbdd44ac8b2c0b8d530ae8591eef3851
  tests271 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prompting (1 mark)"#) -}
11bb3eb647c27bc13e974d9046e92b7b
  tests272 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests505
                   Main.tests273) -}
ca1564a2d25d5ea73f1893d770d3e2b5
  tests273 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests495
                   Main.tests274) -}
879c890f2757ef8328324d875ae4d9cf
  tests274 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests485
                   Main.tests275) -}
c181e270ef90b9b5babc9a56a1d35242
  tests275 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests474
                   Main.tests276) -}
15838cfa47a1a70dd9055ae2298b04e2
  tests276 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests464
                   Main.tests277) -}
9d98390c20678ce8c802f94bad4de732
  tests277 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests452
                   Main.tests278) -}
c46b6e17b5da58af13a260d195fa8b08
  tests278 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests441
                   Main.tests279) -}
60fed0c01c8086d543f2164d61478f35
  tests279 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests430
                   Main.tests280) -}
af86e42a58a25400b7028126f7a7137a
  tests28 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests31
                   Main.tests29) -}
3c1604a16563396164d91977e3d193cc
  tests280 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests419
                   Main.tests281) -}
f3fa93b183d6320c134f8c7527a091ce
  tests281 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests408
                   Main.tests282) -}
2c34218bfae7ffc110e08a79d2e99bf0
  tests282 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests392
                   Main.tests283) -}
a71379c0ebe979a324ae85d925575156
  tests283 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests383
                   Main.tests284) -}
09df19344dd6e981f91cab839f5b87ba
  tests284 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests372
                   Main.tests285) -}
eb313a5f3c636780fda01d8a5468872f
  tests285 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests360
                   Main.tests286) -}
24d96cba6b397c4c6a097cd0b308c3e7
  tests286 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests346
                   Main.tests287) -}
b6a6678fcfdf384d40abd7923e069afc
  tests287 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests334
                   Main.tests288) -}
4a715ccb7efd9a4af9ae15e23b6e43b3
  tests288 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests321
                   Main.tests289) -}
ed62dbc3669ebf6ecf2bf9b412f7c06e
  tests289 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests306
                   Main.tests290) -}
d0393d4819c1e91fab6fcca2838e5af3
  tests29 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests30
                   (GHC.Types.[] @ GHC.Base.String)) -}
b02c3976aa5cbc817588693deeea069c
  tests290 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests291
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
712d61dfdc398f3f3183c3d4a2ea46a9
  tests291 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests305
                   Main.tests292
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
bf262d23a0685a3537b470f7d36a4239
  tests292 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests297
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests295
                   Main.tests293
                   eta2) -}
f994da863c91a1c6d023310d5d86901c
  tests293 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests294
                   BinTree.ins4) -}
4aeddd10659f772f00e3e116c7327127
  tests294 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'c') -}
c872d2e330df58fc247f64774b73b33e
  tests295 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.tests296) -}
ae49feeaaed9176fd796a54bb36f8df0
  tests296 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 99) -}
e00ecb71cc50d70526e8a38a513d9b5a
  tests297 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests298) -}
9bb553e0f5bd850988db002b34d2d35e
  tests298 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests299) -}
5afd1d40ef2024ddec5322a900f51cb8
  tests299 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests300
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
608d74f528470adb15d32f15eeef706d
  tests3 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests201
                   Main.tests4) -}
19b9686689179e519526fa681e1fdeef
  tests30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "remove"#) -}
0676b49f6a7b919b729fb9592de72c20
  tests300 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests301)) -}
5fc073253421dea7fef15e19c2fffddf
  tests301 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests304
                   Main.tests303
                   Main.tests304
                   Main.tests302) -}
b5a4ac9a37ccb36c07c8df4e8e164b35
  tests302 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 44) -}
577dd09aeca5f70b4afac8509d3adec1
  tests303 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41) -}
075aa6737681020cb29d19f6a662ab66
  tests304 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 54) -}
1cb5ca9bf159038a1ffd6f781ca49c40
  tests305 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lookup Branch {R}"#) -}
3c85396bc1e73bbe1ebb1a068ab97536
  tests306 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests320
                   Main.tests307
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
2936bcb9a3ecb5bbd72d1dcf114a2a63
  tests307 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests312
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests310
                   Main.tests308
                   eta2) -}
cb7494342949439c9afe8ce904888658
  tests308 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests309
                   BinTree.leaf_b2) -}
efffbb54f0c5d4cb268ceca27768fde4
  tests309 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'b') -}
35d9de676335773f9ee6e3832add7238
  tests31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "list"#) -}
994f7de695985bf73ddeee7412c3b3c2
  tests310 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.tests311) -}
9b8f46d5e36ba706ea0d26b35f8f2937
  tests311 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
747a76e44ee0fae0bdbc9a2d1de5c663
  tests312 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests313) -}
19b881b9eda4f90f89894ddadddc0bb7
  tests313 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests314) -}
162985a49c2ae3dbfd4da3c9a3781341
  tests314 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests315
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
0536cc853d1232781d51952fb5d7cde0
  tests315 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests316)) -}
5230fc72fe1987aa0b343330beab09ad
  tests316 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests319
                   Main.tests318
                   Main.tests319
                   Main.tests317) -}
72dbdf2d903f818013fe4c2fd7cef90d
  tests317 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 48) -}
7597c6a69f20130f25e53882f0789d35
  tests318 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 45) -}
18750c4d5fe9e4665e9498a965dbf4ca
  tests319 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 53) -}
996cfb240d33c8f82a21ea00c2b8ef76
  tests32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "fix"#) -}
d1612d56220d710161b5f7c817e7ab91
  tests320 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Lookup Leaf (Ok) {R}"#) -}
259cbe7d7ef6b6ff626f20d54c151d90
  tests321 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests333
                   Main.tests322
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
2e4896ef85322b5ca5e3fe4287e3ee3a
  tests322 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests325
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Main.tests323
                   eta2) -}
d35f596e9bfa79f9897a20f1700589ca
  tests323 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests324
                   BinTree.leaf_b2) -}
20ce1eff32ac93eab53e984caa055d01
  tests324 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'a') -}
3de6a6d0ae3dbe9a2eee8cd624470a0c
  tests325 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests326) -}
dea923ba43fe13f8096b909b3457e3eb
  tests326 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests327) -}
8c42e13ccc086b07bc8d7d4602df698a
  tests327 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests328
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
7d670e417bc788b172053ee7e96971c5
  tests328 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests329)) -}
559784e1fde33e593b1c96dab21d3d83
  tests329 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests332
                   Main.tests331
                   Main.tests332
                   Main.tests330) -}
463e6408e386032aa951349710150abb
  tests33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exit"#) -}
3ca43a7ac29ed727adb7396c7c38303b
  tests330 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 50) -}
5c6b7b92184169e3c15bd5b976dcd5c6
  tests331 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 47) -}
0250f80d365c25d4e1c4bbf99c0e5997
  tests332 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 52) -}
09e490fc1817609511316c117295ced8
  tests333 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Lookup Leaf (Fail) {R}"#) -}
28fbc76d8580fd3818c16b2a39e9a1f3
  tests334 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests345
                   Main.tests335
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
333fa4450e70d538e995c410730fbc7a
  tests335 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests337
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Main.tests336
                   eta2) -}
949cbe430c598ce8b98bb6b9f21ad9df
  tests336 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests324
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
a54a4203ba32265ef2d3fad8200049c1
  tests337 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests338) -}
10bab0f3ad711a39f1307a32a731e075
  tests338 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests339) -}
28bcc1be0ae3a50de159a7dfbc9c833d
  tests339 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests340
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
1729c88e4a6939347a1cbf43de3a14b6
  tests34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "add"#) -}
b8f1856e2a118ddbe3904a460aa04361
  tests340 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests341)) -}
839ca38c11f3c99684ff11e14a28568e
  tests341 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests344
                   Main.tests343
                   Main.tests344
                   Main.tests342) -}
3ba2b63a448d8b4335b32f487f8bec5e
  tests342 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 42) -}
a15580ce647846357a5629b9952cbf80
  tests343 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 39) -}
d9e2ad2bcf45861292a9dd4ce969f022
  tests344 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 51) -}
e84f3209869797f002a621e3036e4883
  tests345 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lookup Empty {R}"#) -}
3dd879cbf28a492a59811af51968292d
  tests346 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests359
                   Main.tests347
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
786149897f8ef73c3e900205552d1dcc
  tests347 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests353
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests348
                   BinTree.ins4
                   eta2) -}
049316842e3f96b4f4c7faac0bbb927e
  tests348 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests351
                   Main.tests350
                   Main.tests349
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
faf481dec1e6686ca671b9baa21c993b
  tests349 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
9c447e1d634ecd871ae208ab28e007d3
  tests35 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests36) -}
7ddc740a7c532386daa90a5a20f50198
  tests350 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'd') -}
9230babcd0be25cc9ba1de72b7bf6644
  tests351 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)
                   Main.tests309
                   Main.tests311
                   Main.tests352) -}
e04e0f059fd12dd0e032527865385b68
  tests352 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Leaf
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests294
                   Main.tests296) -}
9dbc00d509c00e5ff7552c43eca2dacc
  tests353 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests354) -}
4c87d9580f81d5551a1e64cf69febe79
  tests354 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests355) -}
bac622981e2e5ab4a0e7aa3db60c4b15
  tests355 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests356
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
3a2154c17c702f792de689318da8e803
  tests356 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests357)) -}
854d89138d043b509ec1bcfb31725156
  tests357 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests213
                   Main.tests358
                   Main.tests213
                   Main.tests248) -}
f8d1aac16d2e46601933ea09d46a8e80
  tests358 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 29) -}
7264f1d0906747e3bc3541de8ed569d2
  tests359 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Insert Branch (Old) {R}"#) -}
9573a21db788f7d1b8a8034bff6d0c60
  tests36 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests37) -}
14d69e1781fe9e7904b6b40f59c61dfb
  tests360 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests371
                   Main.tests361
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
4a532160285441f2155808233ea6323a
  tests361 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests366
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests362
                   BinTree.ins3
                   eta2) -}
d40058074df9cb771164c0a536dc8710
  tests362 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests363
                   Main.tests350
                   Main.tests349
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
4df306e0ac2aac0ba0ae974b926f7724
  tests363 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)
                   Main.tests309
                   Main.tests311
                   Main.tests364) -}
3407777a4ca55a67f357686fddd77d0f
  tests364 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Leaf
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests294
                   Main.tests365) -}
61bd71bdcbdc322023a4d83f822c85cb
  tests365 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3) -}
0c0934188fb402baf447c81846daff0d
  tests366 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests367) -}
b2852dc3b6fcc8212b80085290befbf7
  tests367 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests368) -}
a2627ba9b12179541b7e3e36a4277404
  tests368 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests369
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
fc6af49018af7a35543ad7a8f7382f93
  tests369 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests370)) -}
c93829d0083bf0fed841963cfa980e4b
  tests37 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests38
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
db81a4469cf9da5f4c4dd7d403befb7f
  tests370 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests317
                   Main.tests358
                   Main.tests317
                   Main.tests248) -}
2f1b0ea8d13ea326b35e0e2679c444c8
  tests371 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Insert Branch (New) {R}"#) -}
b594a5ebc47fc4772d300eb4398c2eaf
  tests372 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests382
                   Main.tests373
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
a987e3aabb2a97cc457937f0e236c64e
  tests373 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests375
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests374
                   BinTree.ins2
                   eta2) -}
084e267a5c91ee5916326c4e44b3e1b1
  tests374 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests364
                   Main.tests350
                   Main.tests349
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
de8ec4acc1299e94b677388da79253a1
  tests375 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests376) -}
6216e19d3bc0f131b7538a18db45e979
  tests376 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests377) -}
da293e0edfeb95e363dcb770e2645744
  tests377 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests378
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
009e1f93fc00070cdbb0c7f5c85397d1
  tests378 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests379)) -}
078287b24d8169b166994ddc7c12123d
  tests379 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests331
                   Main.tests381
                   Main.tests331
                   Main.tests380) -}
90497114a746699eb3765d86835aaa90
  tests38 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests39)) -}
17a3ccd92affed98b3bde03306cae9dd
  tests380 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 30) -}
584446b7897e36cd5668d5dd64af7330
  tests381 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27) -}
748204864440e94d73d798ccfe36624d
  tests382 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Insert Leaf {R}"#) -}
e2379cd29c5860e540f05a8ca7f535f3
  tests383 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests391
                   Main.tests384
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
2d2630ea227693ceafe38a3db533975d
  tests384 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests385
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests364
                   BinTree.ins1
                   eta2) -}
5af4579f9e390db10c2c1c2b54ef259a
  tests385 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests386) -}
91c06b865e968d02fad9522a0ea1f28e
  tests386 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests387) -}
d2188fed4b3ed6e0cdf3aaa0564d2e60
  tests387 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests388
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
75eac71df72c0a3f041f3490a4ee8f48
  tests388 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests389)) -}
12200c336e6621868af2e238e6c3395c
  tests389 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests214
                   Main.tests390
                   Main.tests214
                   Main.tests358) -}
01234fa5c65f1e190b64e018ef557da4
  tests39 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests42
                   Main.tests41
                   Main.tests42
                   Main.tests40) -}
19b0d86327433a063b50f97fa4e88e7d
  tests390 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 26) -}
b69ae133036253b4f20af44288c9a0f7
  tests391 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Insert Empty {R}"#) -}
637c10313aec1e4942fbde3ff684d5ca
  tests392 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests407
                   Main.tests393
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
f1ad6fbf394bfb86d1ea9cfd38e04656
  tests393 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                   Main.tests399
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree
                   Main.$s$fShowBinTree
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests398
                   Main.tests394
                   eta2) -}
51c9bbb28f2f35b574626c8c17e9f8d3
  tests394 :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
  {- Unfolding: (BinTree.treeMap
                   @ ()
                   @ GHC.Types.Int
                   @ ()
                   @ [GHC.Types.Int]
                   Main.tests396
                   Main.tests395
                   BinTree.emptyX4) -}
a2db686de1226287058ca7224b708969
  tests395 :: () -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: () -> GHC.Types.[] @ GHC.Types.Int) -}
89a8244747817f660796a43dec9b5509
  tests396 :: () -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: () -> Main.tests397) -}
4fad1c81679ebc148ba6bc2cf9cb8bcb
  tests397 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
e8cffa805a6fec26f13775cde2996c30
  tests398 :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Int
                   @ [GHC.Types.Int]
                   (Main.tests_nullX2 @ GHC.Types.Int)
                   Main.tests397
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Main.tests_nullX2 @ GHC.Types.Int)) -}
54cb055da1b9a765035155c66e0d8552
  tests399 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests400) -}
74e47fe0872e9a766df6e3dba56f7dba
  tests4 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests5
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
79777c794ad5e1ca20290bea0b14935f
  tests40 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
1d3f71360025f9ef039eaec26f4d6d7a
  tests400 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests401) -}
598e28b282cf70d44265884437d5ee1d
  tests401 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests402
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
ebed8ac43665a689b5b7720c9452592e
  tests402 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests403)) -}
830d4e9dffac8be4541dffa64fcdd19d
  tests403 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests406
                   Main.tests405
                   Main.tests406
                   Main.tests404) -}
aea8605d75b8c512d4d66d33f191f450
  tests404 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8) -}
2a2b51530f423b4358fc31c02683f8fd
  tests405 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5) -}
a7bcc7470f5555b29056bc4cf7ef1875
  tests406 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 40) -}
13fa9636fdc0bad3dcf069d3218bf008
  tests407 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Branch {R}"#) -}
729ff7e01e8b325dd960846e8db74c5b
  tests408 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests418
                   Main.tests409
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
425eeb1722b98b1f65ee82316f92bc8e
  tests409 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                   Main.tests411
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree2
                   Main.$s$fShowBinTree3
                   (GHC.Types.[] @ GHC.Types.Char)
                   BinTree.leaf_2b
                   Main.tests410
                   eta2) -}
018cc7caae3bbe119583b777709f11b1
  tests41 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7) -}
bcb34b2cbad43c5ff18f05e1ba4136fd
  tests410 :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
  {- Unfolding: (BinTree.treeMap
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   BinTree.alphaOrd
                   BinTree.alphaChr
                   BinTree.leaf_b2) -}
ea98671ecb360158e4a5e6e3982f1c48
  tests411 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests412) -}
878b1d49c0e36d1e1977c3aedc872ead
  tests412 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests413) -}
b22ba15dfc2a67dc2d6f06b477eb405b
  tests413 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests414
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
4263f31e78c01e562f7ed951049d6a7d
  tests414 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests415)) -}
adec18209e3e6978f8a3c4b67c099911
  tests415 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests417
                   Main.tests319
                   Main.tests417
                   Main.tests416) -}
c7ea9d8629f387daf4ac171394b4e6c2
  tests416 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56) -}
515b134baea1b0d0caf8f28de682b209
  tests417 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 37) -}
14073b05eb23d82fb3e9b9c83873cd41
  tests418 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Leaf {R}"#) -}
f1dddd1d03ea7487a30ba04581c9117f
  tests419 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests429
                   Main.tests420
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
3cb3f2dbf29ee468b1ce1f404cbda719
  tests42 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 167) -}
b218d7053fa0fe0ac6b73fe1af7c93f0
  tests420 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                   Main.tests422
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree2
                   Main.$s$fShowBinTree3
                   (GHC.Types.[] @ GHC.Types.Char)
                   (BinTree.Empty @ GHC.Types.Int @ GHC.Types.Char)
                   Main.tests421
                   eta2) -}
b029cf25947f68eb3bb33c16d51c64a2
  tests421 :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
  {- Unfolding: (BinTree.treeMap
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Base.ord
                   GHC.Char.chr
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
2439cde6a3670b2fdfa89381fc4ad145
  tests422 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests423) -}
032a80105f57e3d7aaef34b6743b781f
  tests423 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests424) -}
88b3e1740ec85a2bf8013e26cead85aa
  tests424 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests425
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
5d1ac079ffa9103b6458a8ab08c807ef
  tests425 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests426)) -}
a777fa70de441c07c750479313f18e6c
  tests426 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests428
                   Main.tests406
                   Main.tests428
                   Main.tests427) -}
607bf5a48338bd2733f23e092225fac8
  tests427 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 43) -}
b3b93d5a6d667c947fd64fbef20d2298
  tests428 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 36) -}
096fd9ba9ebb982c4b1507e953f06c3e
  tests429 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Empty {R}"#) -}
d8281e647edc7e9f52c0dc5f42a696d4
  tests43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/Main.hs"#) -}
d215a4effaaa68245a3b493f4affeaf0
  tests430 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests440
                   Main.tests431
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
854e7eb22a8674c5647213ce1eee6c6d
  tests431 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests434
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests433
                   Main.tests432
                   eta2) -}
959f2f6167ae4a3aeeea2ff1a194cdc3
  tests432 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ ()
                   @ ()
                   GHC.Show.$fShow()
                   GHC.Show.$fShow()
                   GHC.Types.False
                   BinTree.emptyX4) -}
6c903d7119a86bc150734cdee204fed9
  tests433 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch (Branch Empty () () Empty) () () (Branch Empty () () Empty)"#) -}
af5b645fcfc30fe677a05b3711658674
  tests434 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests435) -}
cdcf7661babd112cce27bd7f29264861
  tests435 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests436) -}
68c4640034beee3a668800b0d3522f50
  tests436 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests437
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
d5288d4cc395d5e47c55c1b1924ead10
  tests437 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests438)) -}
dc7320d81cf373138b0c6db484247300
  tests438 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests439
                   Main.tests349
                   Main.tests439
                   Main.tests41) -}
2c45dc793a5ce02f3782006f43a936bd
  tests439 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33) -}
f2808779fa0c36261af21481684ce615
  tests44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
7c88d45097f2989b8847bd83a686193f
  tests440 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Empty X 4 {R}"#) -}
c2463eb91b72f01e51c4690e55b680ad
  tests441 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests451
                   Main.tests442
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
9619bbfe092378ada8498cf3280271ea
  tests442 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests445
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests444
                   Main.tests443
                   eta2) -}
fad6cae565a1e502bfed6a9b824cd939
  tests443 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_right_a1_b2) -}
d4030728dfa4458d7d33860db02fbec0
  tests444 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch Empty 'a' 1 (Leaf 'b' 2)"#) -}
e8e568b565a1f0107733f1e3a48c2a28
  tests445 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests446) -}
b0bfe7ed1bc2300d5415afbf61ad2cac
  tests446 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests447) -}
63db28978bd160df6557e46ef8f10ce7
  tests447 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests448
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
bf1fec367a3ee7bdbded55a987beb0e4
  tests448 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests449)) -}
3db68985cc5ee1f3a7bdc08d8aef03b7
  tests449 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests380
                   Main.tests450
                   Main.tests380
                   Main.tests381) -}
8d052693338c959d2ab29d9a4e058236
  tests45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
26496a469d382a3912597be8e52f991f
  tests450 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 24) -}
cc7af7c7588aafd174d9758801d3ca78
  tests451 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Right a 1 b 2 {R}"#) -}
5631537e59bbfb4cd096b6847bbd0e07
  tests452 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests463
                   Main.tests453
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
4e43bdbe6fb5121d8c2da0deaac3d62f
  tests453 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests456
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests455
                   Main.tests454
                   eta2) -}
32caa2017eb08a62fccf8e90249ec1f9
  tests454 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_left_a1_b2) -}
97f2feb5f1d4a2d1bf69722e2dbc1b5a
  tests455 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch (Leaf 'a' 1) 'b' 2 Empty"#) -}
4800ea9d7c4cd7be66ddb1a03f67efae
  tests456 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests457) -}
52d82d6e0115f396763ba4bef3fca582
  tests457 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests458) -}
b4f24387d9ef430e6d6d802d4fceeadc
  tests458 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests459
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
26f3476cb925242025eb65e102259769
  tests459 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests460)) -}
bf2999b2aea9f6d292f68e38966319b4
  tests46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "@?="#) -}
70d5805a66a7c9ef353a7f5b7948e4ad
  tests460 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests462
                   Main.tests461
                   Main.tests462
                   Main.tests390) -}
a4b8317bcac49a49f6f704f0b4a0e742
  tests461 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 23) -}
3bcc2111f26f7ae5d9631fd0040a6c43
  tests462 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 28) -}
b8dc81f84056dcb97a96c9cba429807a
  tests463 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Left a 1 b 2 {R}"#) -}
29218f78c2e20410415e0df4e054955d
  tests464 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests473
                   Main.tests465
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
5f2ee4119455d97d6455bc81dc21e50d
  tests465 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests468
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests467
                   Main.tests466
                   eta2) -}
786886773bac7e03e88df131fe39b2f3
  tests466 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_emp_a1) -}
23c71f84e4e00476db8f7609414bc766
  tests467 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch Empty 'a' 1 Empty"#) -}
b08060195e283bdbabd97b0a441dd8b8
  tests468 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests469) -}
8492e9c594de33221539dcb596939f32
  tests469 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests470) -}
b7a83d83a7778b04cd34bd899476a7fe
  tests47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Help Listing {2 marks}"#) -}
65642b6bedbeb869089aa81091f75592
  tests470 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests471
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
05ac90537c55fb2d3254afd66990fb92
  tests471 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests472)) -}
1969da41c6057da58de73970371ba3a1
  tests472 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests390
                   Main.tests406
                   Main.tests390
                   Main.tests427) -}
73c723323e3869b138ba758490b980bb
  tests473 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Empty a 1 {R}"#) -}
b66c924bb9157f2f5d0e08241b19d07f
  tests474 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests484
                   Main.tests475
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
e82c57a1f06b7673b013abeb83769cfd
  tests475 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests478
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests477
                   Main.tests476
                   eta2) -}
a5a4acd35e8e373232da32739cbbd42d
  tests476 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowChar
                   GHC.Types.False
                   BinTree.leaf_1a) -}
c63c2b8ee668f5dc68f2beb7f28b5efd
  tests477 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Leaf 1 'a'"#) -}
01c6fc6b5103e053ce8324b096c49775
  tests478 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests479) -}
7c715d86755b139edaac119c65ca319f
  tests479 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests480) -}
f559ad06ab93773fa2357b6051ed56d4
  tests48 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests77
                   Main.tests49
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
b390f07ef20c4435c355a48e48bc55ee
  tests480 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests481
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
2379b07a9c74750214d766964d2da18e
  tests481 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests482)) -}
c2e541a1e68b248d252e5dac4e0d12e3
  tests482 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests483
                   Main.tests428
                   Main.tests483
                   Main.tests343) -}
d85953b5544f2744c71c33f1747eb756
  tests483 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 25) -}
751d7c2723db52206a063581ff1afb43
  tests484 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Leaf 1 a {R}"#) -}
1819af905ab2c7f10ae228e8f9d89063
  tests485 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests494
                   Main.tests486
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
4790463051b26f48e274962bb5829bd9
  tests486 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests489
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests488
                   Main.tests487
                   eta2) -}
ad79cbbf0d1b74178198722bd5e359d0
  tests487 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.leaf_a1) -}
a9dae7892a8c507b096ce5a2b67b167c
  tests488 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Leaf 'a' 1"#) -}
24c72dc708f9793f65189bd7f93b0506
  tests489 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests490) -}
7c29a700b3883aa54826d66a1fc71d40
  tests49 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Base.String]
                   Main.tests71
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   GHC.Show.$fShow[]_$s$fShow[]2
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests64
                   Main.tests50
                   eta2) -}
57c85e7eb977f89af9aa030a582d14a7
  tests490 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests491) -}
e6978cc2aa97fea59b05b4880144072b
  tests491 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests492
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
079aed570a427138ff274fb8c8d738c7
  tests492 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests493)) -}
93675097cafb80f06f95b91cd35a53c2
  tests493 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests450
                   Main.tests428
                   Main.tests450
                   Main.tests343) -}
b6c4bde3bdde8817865b9ca0f60fd3c7
  tests494 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Leaf a 1 {R}"#) -}
8f08f0162b6fa384048d92dbd0cce3e9
  tests495 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests504
                   Main.tests496
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
5627e39b7d72a8d8dbf3a4577a00d589
  tests496 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests499
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests498
                   Main.tests497
                   eta2) -}
e77a74e45b29fa26989e4b59249ff8e4
  tests497 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
77125f42d57f2a45fb0a7474389aacf4
  tests498 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
5e04a8108009f4f61bab54ebb763bbca
  tests499 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests500) -}
1ff37cf4ecf0ca64da2c12de96b933a7
  tests5 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests200
                   Main.tests6) -}
856cdfabbff39266b757bec1a0277594
  tests50 :: [GHC.Base.String]
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ [GHC.Base.String]
                   Main.tests51
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R))) -}
2f44594c525392f8ea46399a058f34fa
  tests500 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests501) -}
28398d4913fe1c34cd5a62862dfb36e5
  tests501 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests502
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
01e6b1ede682ff02425ee5a8504d5048
  tests502 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests503)) -}
a595dfe9db45ea16fa6cb2448e8ee9b9
  tests503 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests461
                   Main.tests439
                   Main.tests461
                   Main.tests428) -}
4b5f1b18ce22e4b722591f514f44b2cf
  tests504 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Empty {R}"#) -}
337c6e43008b5e4ff1be3f5a319d0233
  tests505 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \REGRESSION TESTS (not marked)"#) -}
de710cfcf475603afb94685e44a08f6a
  tests51 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests63
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests31
                        Main.tests52
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests63
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, Data.OldList.lines ipv9 #) } } } } } }) -}
95e9756c409b7b262de70379c94ca0bb
  tests52 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests54, Main.tests53)) -}
062ca8afca16da9566cf92ca5280611f
  tests53 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 15001.0) -}
588c97588ebe3db86d37502b8a3ca109
  tests54 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests60
                   Main.tests59
                   Main.tests58
                   Main.tests55) -}
c632cc2f7b1c9ac6844c3d4c3b37dc57
  tests55 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests57
                   Main.tests56) -}
97a768a2171346eae32cf7d1e7e21e03
  tests56 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 15000.0) -}
f1f43dc5cd345c48a51cedfefb48bfa1
  tests57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "home"#) -}
460bc239441c5efcb13f32f620318f8d
  tests58 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 1000.0) -}
2e7a0a6edd89c1a3f6669eff8e3aed07
  tests59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "gold"#) -}
37cedcb05ba852415acf74271aba6f97
  tests6 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests187
                   Main.tests7) -}
cd00ca31edda7600477a4dcfe78d541d
  tests60 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests62
                   Main.tests61) -}
93639327cf56472440946d997b938a7f
  tests61 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 1.0) -}
5f7acef03839abc0db707f392106e119
  tests62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "banana"#) -}
2da18897b5a8bd100fcd56b225abfc28
  tests63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/list_ghb.log"#) -}
497306def5a3f43ec95fb6b02f887365
  tests64 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests70
                   Main.tests65) -}
d9def51e694ce48173a6600c84b7e4f4
  tests65 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests69
                   Main.tests66) -}
425b1f9e2b2a46cb8aeb5e40b074e54f
  tests66 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests68
                   Main.tests67) -}
229a3fcbf93df006a6b1ac8f809e6317
  tests67 :: [GHC.Base.String]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Base.String)) -}
ff977b7d18cc3459e3bddaf689f5b203
  tests68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "home 15000.0"#) -}
fc44c041e50df75bdba204911d178ce9
  tests69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "gold 1000.0"#) -}
606af5132be97ffb4f85e640fbee972b
  tests7 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests175
                   Main.tests8) -}
b3e6dcadd652847d6f3a4a0ba949de2f
  tests70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "banana 1.0"#) -}
a12cd14af12c4305d97681baec555c2f
  tests71 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests72) -}
078a8414cea2fd474e0513bf80f157d6
  tests72 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests73) -}
146485a6faa18840ddd7489348d6cea6
  tests73 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests74
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
a51fec97cd6c20096f09fed752c1048a
  tests74 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests75)) -}
48297ba1ba04d4806cea261bbd6270b2
  tests75 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests76
                   Main.tests41
                   Main.tests76
                   Main.tests40) -}
d85ac226b1efad863497930217881101
  tests76 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 158) -}
173b186e596881e8e8781db96a09b6fd
  tests77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "List (b,g,h) {2 marks}"#) -}
f8a1026752e38300dfb746465888d756
  tests78 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests98
                   Main.tests79
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
7b4c6d702c40b8b59966bcc8d769f3f9
  tests79 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests92
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests89
                   Main.tests80
                   eta2) -}
0f97c122763c2713dbd5d4c3bb333bae
  tests8 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests161
                   Main.tests9) -}
0481a61032444aa1c1260711cc94c545
  tests80 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests81
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
f6525b3966a96bc1c117458bc2936647
  tests81 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests88
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests30
                        Main.tests82
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
6dd8b8c588aab6de68fd5fe93f468369
  tests82 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests84, Main.tests83)) -}
7ec8807ec50281d29d2acf7d71318f64
  tests83 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 101.0) -}
19cc429b28891c6d1857368212a78746
  tests84 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests62
                   Main.tests61
                   Main.tests85) -}
68ef632114a5c5663071846328cdf2bb
  tests85 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests86) -}
64be7889150be6bd79c8991b43424886
  tests86 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 100.0) -}
0372c5aa9a38614794612bc05ea4617e
  tests87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/tests.log"#) -}
1b11e29f4bf28650663897e742f4cef4
  tests88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/remove_gold.txt"#) -}
e7a3fdde7271c09875af734fbe674756
  tests89 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests90, Main.tests61)) -}
f074ed6023c253ddfbaa6d29c11644eb
  tests9 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests148
                   Main.tests10) -}
9fbcfb03dd81f24d4d311431b117b824
  tests90 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests62
                   Main.tests61
                   Main.tests91) -}
3033a6c039b7dd64ef8e69329ed84fd0
  tests91 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests21) -}
03b5a0f135869d84a43f2f25af0e3856
  tests92 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests93) -}
2aa62b798e11b12208ab05b2193ffb1b
  tests93 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests94) -}
f228cfa2447e3abb1fb2d4c9de320b55
  tests94 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests95
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
837771531e3c645d83b25cf75217d78a
  tests95 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests96)) -}
1bd34302b22fac2b0262d74de1c92a4c
  tests96 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests97
                   Main.tests41
                   Main.tests97
                   Main.tests40) -}
e2fa61d691142b9dc66decb9fcd9db3d
  tests97 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 145) -}
498ce00ca2b79b35ea94361a1d57ac17
  tests98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Remove Branch {2 marks}"#) -}
09fb1dfdb894723302d5af7f312d897f
  tests99 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests112
                   Main.tests100
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
93a3f180a8892fe5a71ac9806bf31a7a
  tests_go :: [[GHC.Types.Char]] -> Data.Monoid.Any
  {- Arity: 1, Strictness: <S,1*U> -}
a56c62b5552cc6a1040c4a9f83b5dbc6
  tests_nullX2 :: BinTree.BinTree GHC.Types.Int [t]
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (\ @ t ->
                 BinTree.Branch
                   @ GHC.Types.Int
                   @ [t]
                   (BinTree.Empty @ GHC.Types.Int @ [t])
                   Main.tests397
                   (GHC.Types.[] @ t)
                   (BinTree.Empty @ GHC.Types.Int @ [t])) -}
"SPEC/Main $fEq(,) @ (BinTree String Float) @ Float" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                               (BinTree.BinTree
                                                                                  GHC.Base.String
                                                                                  GHC.Types.Float)
                                                                     $dEq1 :: GHC.Classes.Eq
                                                                                GHC.Types.Float
  GHC.Classes.$fEq(,) @ (BinTree.BinTree
                           GHC.Base.String GHC.Types.Float)
                      @ GHC.Types.Float
                      $dEq
                      $dEq1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,) @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                     (BinTree.BinTree
                                                                                        GHC.Base.String
                                                                                        GHC.Types.Float,
                                                                                      GHC.Types.Float)
                                                                           $dEq1 :: GHC.Classes.Eq
                                                                                      GHC.Types.Bool
  GHC.Classes.$fEq(,) @ (BinTree.BinTree
                           GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float)
                      @ GHC.Types.Bool
                      $dEq
                      $dEq1
  = Main.$s$fEq(,)3
"SPEC/Main $fEqBinTree @ Char @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               GHC.Types.Char
                                                     $dEq1 :: GHC.Classes.Eq GHC.Types.Int
  BinTree.$fEqBinTree @ GHC.Types.Char @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEqBinTree4
"SPEC/Main $fEqBinTree @ Int @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               GHC.Types.Int
                                                     $dEq1 :: GHC.Classes.Eq GHC.Types.Char
  BinTree.$fEqBinTree @ GHC.Types.Int @ GHC.Types.Char $dEq $dEq1
  = Main.$s$fEqBinTree2
"SPEC/Main $fEqBinTree @ Int @ [Int]" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                GHC.Types.Int
                                                      $dEq1 :: GHC.Classes.Eq [GHC.Types.Int]
  BinTree.$fEqBinTree @ GHC.Types.Int @ [GHC.Types.Int] $dEq $dEq1
  = Main.$s$fEqBinTree
"SPEC/Main $fEqBinTree @ [Char] @ Float" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                   [GHC.Types.Char]
                                                         $dEq1 :: GHC.Classes.Eq GHC.Types.Float
  BinTree.$fEqBinTree @ [GHC.Types.Char] @ GHC.Types.Float $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEqBinTree
"SPEC/Main $fEqMaybe @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                      GHC.Types.Int
  GHC.Base.$fEqMaybe @ GHC.Types.Int $dEq = Main.$s$fEqMaybe
"SPEC/Main $fShow(,) @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                   (BinTree.BinTree
                                                                                      GHC.Base.String
                                                                                      GHC.Types.Float)
                                                                       $dShow1 :: GHC.Show.Show
                                                                                    GHC.Types.Float
  GHC.Show.$fShow(,) @ (BinTree.BinTree
                          GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)
"SPEC/Main $fShow(,) @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                         (BinTree.BinTree
                                                                                            GHC.Base.String
                                                                                            GHC.Types.Float,
                                                                                          GHC.Types.Float)
                                                                             $dShow1 :: GHC.Show.Show
                                                                                          GHC.Types.Bool
  GHC.Show.$fShow(,) @ (BinTree.BinTree
                          GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)4
"SPEC/Main $fShow(,)_$cshow @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                          (BinTree.BinTree
                                                                                             GHC.Base.String
                                                                                             GHC.Types.Float)
                                                                              $dShow1 :: GHC.Show.Show
                                                                                           GHC.Types.Float
  GHC.Show.$fShow(,)_$cshow @ (BinTree.BinTree
                                 GHC.Base.String GHC.Types.Float)
                            @ GHC.Types.Float
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Main $fShow(,)_$cshow @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                (BinTree.BinTree
                                                                                                   GHC.Base.String
                                                                                                   GHC.Types.Float,
                                                                                                 GHC.Types.Float)
                                                                                    $dShow1 :: GHC.Show.Show
                                                                                                 GHC.Types.Bool
  GHC.Show.$fShow(,)_$cshow @ (BinTree.BinTree
                                 GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)
                            @ GHC.Types.Bool
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow1
"SPEC/Main $fShow(,)_$cshowList @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                              (BinTree.BinTree
                                                                                                 GHC.Base.String
                                                                                                 GHC.Types.Float)
                                                                                  $dShow1 :: GHC.Show.Show
                                                                                               GHC.Types.Float
  GHC.Show.$fShow(,)_$cshowList @ (BinTree.BinTree
                                     GHC.Base.String GHC.Types.Float)
                                @ GHC.Types.Float
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Main $fShow(,)_$cshowList @ (BinTree String Float,
                                  Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                      (BinTree.BinTree
                                                                                                                                         GHC.Base.String
                                                                                                                                         GHC.Types.Float,
                                                                                                                                       GHC.Types.Float)
                                                                                                                          $dShow1 :: GHC.Show.Show
                                                                                                                                       GHC.Types.Bool
  GHC.Show.$fShow(,)_$cshowList @ (BinTree.BinTree
                                     GHC.Base.String GHC.Types.Float,
                                   GHC.Types.Float)
                                @ GHC.Types.Bool
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList1
"SPEC/Main $fShowBinTree @ Char @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                   GHC.Types.Char
                                                       $dShow1 :: GHC.Show.Show GHC.Types.Int
  BinTree.$fShowBinTree @ GHC.Types.Char
                        @ GHC.Types.Int
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree6
"SPEC/Main $fShowBinTree @ Int @ Char" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                   GHC.Types.Int
                                                       $dShow1 :: GHC.Show.Show GHC.Types.Char
  BinTree.$fShowBinTree @ GHC.Types.Int
                        @ GHC.Types.Char
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree3
"SPEC/Main $fShowBinTree @ Int @ [Int]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    GHC.Types.Int
                                                        $dShow1 :: GHC.Show.Show [GHC.Types.Int]
  BinTree.$fShowBinTree @ GHC.Types.Int
                        @ [GHC.Types.Int]
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree
"SPEC/Main $fShowBinTree @ [Char] @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       [GHC.Types.Char]
                                                           $dShow1 :: GHC.Show.Show GHC.Types.Float
  BinTree.$fShowBinTree @ [GHC.Types.Char]
                        @ GHC.Types.Float
                        $dShow
                        $dShow1
  = Main.$s$fShow(,)_$s$fShowBinTree
"SPEC/Main $fShowMaybe @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          GHC.Types.Int
  GHC.Show.$fShowMaybe @ GHC.Types.Int $dShow = Main.$s$fShowMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

